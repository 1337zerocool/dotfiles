vim.opt.allowrevins = false				-- Disable "reverse" insert mode
vim.opt.autochdir = false				-- Change directory to the path of the current open buffer
vim.opt.autoindent = true				-- automating indentation
vim.opt.autoread = true					-- Re-read a buffer if it's file changes
vim.opt.autowriteall = false				-- Write a buffer's content to disk every time you change/quit buffers
vim.opt.background = "dark"				-- Use dark-mode color groups
vim.opt.backspace = "eol,start,indent"			-- Allow backspace to erase linebreaks, past the start of insert mode and through indentation
vim.opt.backup = false					-- Don't create '~" files when editing
vim.opt.backupcopy = "no"				-- When making backups, rename the original file and write a new one
vim.opt.backupdir = vim.fn.stdpath("data") .. "/backup" -- Where to store backups (in ~/.local/share/nvim/backup)
vim.opt.backupext = "no"				-- When making backups, append a "~" to the end of the name
vim.opt.belloff = "all"					-- Don't make noise
vim.opt.bomb = false					-- Don't write BOM as it just causes problems when you don't want it
vim.opt.breakat = " ^I!@*-+;:,./?"			-- Which characters to prefer to line break at
vim.opt.breakindent = true				-- When line-breaking preserve indentation
-- vim.opt.breakindentopt = ""				-- Additional config for how to indent when linebreaking is enabled
vim.opt.cdhome = false					-- If you run `:cd` don't change the path to ~/ like unix. just print current dir
vim.opt.clipboard = "unnamed,unnamedplus"		-- Use the system clipboard. On mac and windows these are the same but not on linux
vim.opt.cmdheight = 1					-- Height for command line. 0 causes issues with some commands right now
vim.opt.cmdwinheight = 10				-- Height for command line window
vim.opt.colorcolumn = "+0"				-- Highlight the columng at 'textwidth'
vim.opt.completeopt =					-- see completion.lua
  "menu,preview,noinsert,menuone,noselect"  		-- use a popump menu for completion, even with only one option, make people select to use completion and don't insert until they do
vim.opt.cursorcolumn = false				-- Highlight the the column that the cursor is on
vim.opt.cursorline = false				-- Highlight the line the cursor is on
-- vim.opt.cursorlineopt				-- aditional options for curosor line
vim.opt.debug = ""					-- How to handle debug messages
vim.opt.dictionary = ""					-- Path to custom spell dictionary
vim.opt.diffopt = "internal,filler,closeoff"		-- Custom settings for diff handling
vim.opt.digraph = false					-- allow entering of digraphs in insert mode
vim.opt.directory = vim.fn.stdpath("data") .. "/swap"   -- swap path location
vim.opt.display = "lastline"				-- show as much as psosible in the last line of a window
vim.opt.eadirection = "both"				-- how does "equalalways" works - vertical and horizontal
vim.opt.emoji = true					-- always show emoji as full width, even "text" emoji
vim.opt.endofline = true				-- don't write an EOL automaitcally when writing a binary file
vim.opt.equalalways = true				-- when splitting and closing windows, keep them the same size
vim.opt.equalprg = ""					-- what external program to use for formating with `=` by default
vim.opt.errorbells = false				-- don't make noise on errors
vim.opt.errorfile = "errors.err"			-- default file to use for quickfix mode (:cf)
-- vim.opt.errorformat = ""				-- The default is fine. Scanf description of lines in the error file
vim.opt.eventignore = ""				-- autocmd events to ignore
vim.opt.expandtab = true				-- use spaces instead of tabs for indent. Set this up in a ftplug instead if you want tabs to be tabs
vim.opt.exrc = false					-- Don't run .nvimrc, .nvim.lua, or .exrc in cwd automatically
vim.opt.fileencoding = ""				-- automatically convert encodings when not dealing with UTF-8. Can cause data loss if enabled
vim.opt.fileformat = "unix"				-- use unix style line endings
vim.opt.fileformats = "unix,mac,dos"			-- order to try and detect line endings when editing a file
vim.opt.fillchars =  {					-- defailt fill chars for staus bars, split borders, etc.
  fold = " ",
  foldopen = "▾",
  foldclose = "▸"
}
vim.opt.fixendofline = true				-- always add the EOL to the end of a file if it's missing
vim.opt.foldclose = ""					-- Always close folds when you leave them if set to 'all'
vim.opt.foldcolumn = "0"				-- How to draw the fold column: 0 = disable
vim.opt.foldenable = true				-- toggle between showing folded text and disabling folds
vim.opt.foldexpr = "0"					-- set a custom fold expression
vim.opt.foldignore = "#"				-- Lines starting with # will take fold setting from surrounding lines
vim.opt.foldlevel = 2					-- Close folds automatically with level higher than 0
vim.opt.foldlevelstart = -1				-- When starting a new window, start with folds at this level closed (-1 = all open)
vim.opt.foldmarker = "{{{,}}}"				-- Litteral string expression used when fold method is 'marker'
vim.opt.foldmethod = "manual"				-- kind of folding to use by default
vim.opt.foldminlines = 1				-- minimum number of lines to save with a fold
vim.opt.foldnestmax = 20				-- maximum number of nested folds for syntax/indent methods
vim.opt.foldopen = "block,hor,mark,percent,quickfix,search,tag,undo" -- list of commands that will open folds
function _G.CustomFoldText() 				-- see https://essais.co/better-folding-in-neovim/
  return  vim.fn.getline(vim.v.foldstart) .. ' … ' .. vim.fn.getline(vim.v.foldend):gsub("^%s*", "")
end
vim.opt.foldtext = 'v:lua.CustomFoldText()'		-- use custom function to create fold texts
vim.opt.foldtext = "foldtext()"				-- method to compute text for a fold
vim.opt.formatexpr = ""					-- expression to format a range of lineswith `gq`
-- vim.opt.formatlistpat = "^\s*\d\+[\]:.)}\t ]\s*"	-- pattern for recognizing a list header
vim.opt.formatoptions = "tcqj"				-- autowrap, autowrap comments, format paragraphs, format with gq, see https://neovim.io/doc/user/change.html#fo-table
vim.opt.formatprg = ""					-- program to format with
vim.opt.fsync = false					-- call fsync() after :write to ensure things get to disk - not needed, computers are fast/stable
vim.opt.gdefault = false				-- don't enable 'g' flag by default for :substitute
-- vim.opt.grepformat = "%f:%l:%m,%f:%l%m,%f  %l%m"	-- format to recognize for :grep use "%f:%l:%c:%m" if grepprg=rg
-- vim.opt.grepprg = "rg --vimgrep -uu"			-- program to use for grep
-- vim.opt.guicursor = "n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20" -- contro for cursor in guis and most terminals
-- vim.opt.guifont = ""					-- list of fonts to use in gui vim
-- vim.opt.guifontwide = ""				-- list of fonts for double width characters
-- vim.opt.guioptions = "egmrLT"				-- special options for gui vim
-- vim.opt.guitablabel = ""				-- text to use in label of gui tab pages line
-- vim.opt.guitabtooltip = ""				-- tooltip to use in gui tab pages line
-- vim.opt.helpfile = "$VIMRUNTIME/doc/help.txt"		-- path to help files
-- vim.opt.helpheight = 20					-- default hight for :help
vim.opt.helplang = ""					-- default language for :help
vim.opt.hidden = true					-- allow buffers to exist even if there are no windows for them
vim.opt.history = 10000					-- allow the maximum number of history items
vim.opt.hlsearch = false				-- highlight search results
vim.opt.icon = false					-- don't set the icon text to the name of the edited file
vim.opt.iconstring = ""					-- text to use if icon was on
vim.opt.ignorecase = true				-- ignore case in searches
-- vim.opt.imcmdline = false				-- input method is always on when editing a command line
-- vim.opt.imdisable = false				-- never use input method (only works on sgi/irix anyway)
vim.opt.iminsert = 0					-- lmap and imap are both off
vim.opt.imsearch = -1					-- don't use input method when entering search
vim.opt.inccommand = "nosplit"				-- show preview of commands like :s inline instead of as a split
-- vim.opt.include = ""					-- pattern to find an include command
-- vim.opt.includeexpr = ""				-- command to transform result of include program
vim.opt.incsearch = true				-- highlight search results as you type
-- vim.opt.indentexpr = ""				-- expression to indent a line
-- vim.opt.indentkeys = "0{,0},0),0],:,0#,!^F,o,O,e"	-- list of keys that cause a re-indent when in insert mode
vim.opt.infercase = false				-- transform match suggestions to the typed case when using autocomplete
vim.opt.isfname = "@,48-57,/,.,-,_,+,,,#,$,%,~,="	-- pattern for finding filenames for `gf`
vim.opt.isident = "@,48-57,_,192-255"			-- pattern for finding identifiers after a DEFINE
vim.opt.iskeyword = "@,48-57,_,192-255"			-- pattern for finding keywords
vim.opt.isprint = "@,161-255"				-- printable characters (added to ascii 32 to 126)
vim.opt.joinspaces = false				-- don't put 2 spaces after a "." or "?" etc. when using J
vim.opt.jumpoptions = "stack"				-- remove unloaded buffers from jump list
-- start here
-- vim.opt.keymap = ""					-- name of a keymapping?
vim.opt.keymodel = ""					-- list of keys (home, end, pgup, pgdown) that can do special things (starsel, stopsel)
vim.opt.keywordprg = ":Man"				-- program to use for K
vim.opt.langmap = ""					-- set keyboard to a special language
vim.opt.langmenu = ""					-- language to use for menu translations
vim.opt.langremap = false 				-- make langmap not apply to character remappings
vim.opt.laststatus = 2					-- the last window always has a status line
vim.opt.lazyredraw = false				-- don't redraw while doing macros
vim.opt.linebreak = false				-- wrap long lines at vim.opt.breakat characters
-- vim.opt.lines = 24					-- number of lines in the vim window
vim.opt.linespace = 0					-- number of pixels between characters
-- vim.opt.lisp = false					-- when enter is typed in insert mode set next line to lisp mode
-- vim.opt.lispoptions = ""				-- list of tiems that influence lisp indenting
-- vim.opt.lispwords = ""				-- list of words that influence lisp indenting
vim.opt.list = true					-- by default show 'hidden' characters like tab and spaces trailing lines
vim.opt.listchars = {					-- characters to use for showing hidden chars
  nbsp = "○",
  tab = "→ ",
  eol = "↵",
  trail = "␣",
  extends = "⇀",
  precedes = "↼"
}
vim.opt.loadplugins = true				-- load plugins when starting vim
vim.opt.magic = true					-- use magical nonsense when creating patterns for / etc. don't turn it off
vim.opt.makeef = ""					-- name of the errorfile for :make
vim.opt.makeencoding = ""				-- encoding for reading the output of make
vim.opt.makeprg = "make"				-- program to use for :make
vim.opt.matchpairs = "(:),{:},[:],<:>"			-- characters that form matching pairs for % command
vim.opt.matchtime = 2					-- length of tiem to show matching character (in tenths of a second?!)
vim.opt.maxfuncdepth = 100				-- maximum depth of user functions (to limit infinite recursion)
vim.opt.maxmapdepth = 1000				-- maximum depth of a mapping to be used without actually doing something (limit infinite mappings)
vim.opt.maxmempattern = 1000				-- use 1 megabyte of ram for pattern matching
vim.opt.menuitems = 20					-- maximum number of menu items
-- vim.opt.mkspell = "460000,2000,500"			-- tunes when to start compressing word tree for :mkspell to create spell files
vim.opt.modeline = false				-- don't check for mode lines
vim.opt.modelineexpr = false				-- don't allow expressions in modelines
vim.opt.modelines = 5					-- number of lines to check for modelines
-- vim.opt.modifiable = true				-- buffer variables: can you edit this one?
-- vim.opt.modified = false				-- buffer variables: was this edited?
vim.opt.more = false					-- don't pause and prompt for more when listings happen
vim.opt.mouse = "nvich"					-- enable mouse in normal, visual, insert, command mode, and when editing help files
vim.opt.mousefocus = false				-- dont use focus follows mouse
vim.opt.mousehide = true				-- hide the mouse cursor when characters are typed
vim.opt.mousemodel = "popup_setpos"			-- right clicking moves the cusor to the click point and shows a popup menu
vim.opt.mousemoveevent = false				-- don't send mouse movements to the event queue (can't map them)
vim.opt.mousescroll = "ver:5,hor:5"			-- scroll 5 chars with mouse wheel.
-- vim.opt.mouseshape =  "i:beam,r:beam,s:updown,sd:cross,m:no,ml:up-arrow,v:rightup-arrow" -- shape of mouse cusor to use
vim.opt.mousetime = 500					-- 500ms to count as double click
vim.opt.nrformats = "bin,hex,unsigned"			-- what vim considers to be numbers for ^a ^x
vim.opt.number = true					-- print line numbrs in this window
-- vim.opt.numberwidth = 4				-- number of lines to reserve for number column
vim.opt.omnifunc = ""					-- function to be used for omni completion in insert mode
vim.opt.operatorfunc = ""				-- function to be called by g@
-- vim.opt.packpath = ""					-- path to find packages
vim.opt.paragraphs = "IPLPPPQPP TPHPLIPpLpItpplpipbp"	-- macros that separate paragraphs
vim.opt.patchexpr = ""					-- expression to apply a patch file
vim.opt.patchmode = ""					-- keep oldest version of a file when patching
vim.opt.path = ".,,"					-- list of directories to search for things like gf, :find, etc
vim.opt.preserveindent = false				-- when indenting preserve as much of the indent structure as possible (don't rewrite spaces/tabs)
vim.opt.previewheight = 10				-- use 10 line preview hight of window
-- vim.opt.previewwindow = false			-- set current window as preview window
vim.opt.pumblend = 0					-- fake transparency to use for popump menu (0 = off)
vim.opt.pumheight = 10					-- maximum 10 items in pop up menu
vim.opt.pumwidth = 15					-- minimum width for popup menu
vim.opt.pyxversion = 3					-- python version to use for pyx* function (only 3 is valid)
vim.opt.quickfixtextfunc = ""				-- function to use for the quickfix and loclist windows
-- vim.opt.quoteescape = "\\"				-- character to use to escape things in quotes. This is a single backslash, but escaped because its in quotes
-- vim.opt.readonly = false				-- this buffer is read only, you must use :w! to write it
vim.opt.redrawdebug = ""				-- change the way redrawing works to debug stuff
vim.opt.redrawtime = 2000				-- time limit (ms) for redrawing the display. once this time has elapsed, stop redrawing
vim.opt.regexpengine = 0				-- auto select regex engine. default use new one but fall back to old if something isn't supported
vim.opt.relativenumber = false				-- show line numbers relative to the cursor rather than absolute
vim.opt.report = 2					-- threshold for reporting number of lines changed in status bar
vim.opt.revins = false					-- inserting characters in insert modewill work backwards
vim.opt.rightleft = false				-- display orientation is not right to left
vim.opt.rightleftcmd = "search"				-- enable right to left mode in search mode
vim.opt.ruler = true					-- show the line and column of the cursor
vim.opt.rulerformat = ""				-- set the content of the ruler when displayed
-- vim.opt.runtimepath = ""				-- big default.  path to find scripts/plugins/colors/compilers/docs/etc.
vim.opt.scroll = 5					-- scroll five lines with ^u ^d
vim.opt.scrollback = 1					-- number of lines to keep beyond the visible screen
-- vim.opt.scrollbind = false				-- when set, all windows with scrollbind set scroll together
vim.opt.scrolljump = 1					-- number of lines to scroll when cursor gets off the screen
vim.opt.scrolloff = 5					-- number of lines to keep above/below the cursor
vim.opt.scrollopt = "hor,ver,jump"			-- scroll bound windows scroll together and jump to maintain relative offset
vim.opt.sections = "SHNHH HUnhsh"			-- nroff macros that separate sections
vim.opt.selection = "inclusive"				-- last character of the selection is included (visual mode)
vim.opt.selectmode = ""					-- when to use select mode rather than visual mode
vim.opt.sessionoptions = "blank,buffers,curdir,folds,help,tabpages,winsize,terminal" -- options for using :mksession
-- vim.opt.shada = "!,'100,<50,s10,h"			-- configure the shada file. read / written at launch/quit to store marks, history,searches, etc.
-- vim.opt.shadafile = ""				-- set a custom file name for shadafile
-- vim.opt.shell = "$SHELL"				-- shell to use
vim.opt.shellcmdflag = "-c"				-- flag passed to shell when running "!" commands
-- vim.opt.shellpipe = ">"				-- string used to put the output of :make into make error file
-- vim.opt.shellquote = ""				-- quotes to put around shell commands
-- vim.opt.shellredir = ">"				-- string to put output of filter commands into temp file (e.g. :sort)
vim.opt.shelltemp = true				-- use temp file for the output of shell commands
-- vim.opt.shellxescape = ""				-- special chars to escape for shell commands (seems to be for windows)
-- vim.opt.shellxquote = ""				-- characters to wrap around commands passed to the shell including redirection
vim.opt.shiftround = true				-- round indent to multiple of shiftwidth
vim.opt.shiftwidth = 2					-- default value to indent by
vim.opt.shortmess = "ltToOCFsIcW"			-- helps to avoid a bunch of "press enter" prompts after running commands and stuff
vim.opt.showbreak = ""					-- srting to put at the start of lines that have been wrapped
-- end here
vim.opt.showcmd = true					-- show partial command in the last line of the screen
vim.opt.showcmdloc = "last"				-- where to show the partially entered command (last line of scren)
vim.opt.showfulltag = false				-- when compelting from tags file, don't show tag name and tidied version together
vim.opt.showmatch = false				-- when bracket is inserted don't briefly jump to matching bracket
vim.opt.showmode = false				-- show mode changes on last line of screen
vim.opt.showtabline = 1					-- only show tab line if at least two tab pages
vim.opt.sidescroll = 5					-- number of horizontal columns to scroll when the cursor is moved off screen
vim.opt.sidescrolloff = 10				-- number of characters to keep as padding on the side when scrolling
vim.opt.signcolumn = "yes:1"				-- how to draw the sign column
vim.opt.smartcase = false				-- override ignorecase if search includes upper and lower case letters
vim.opt.smartindent = true				-- do smart indents when inserting a new line
vim.opt.smarttab = true					-- using tab inserts according to shiftwidth
vim.opt.smoothscroll = false				-- ignore scrolling to work with screen lines
vim.opt.softtabstop = 2					-- have tab insert a combination of spaces and tabs
vim.opt.spell = false					-- don't enable spell check
-- vim.opt.spellcapcheck = "[.?!]\_[\])'"\t ]\+"	-- pattern to locate end of sentence and ensure next one starts with capital
-- vim.opt.spellfile = ""				-- file containing wordlists to add to spell.  must end in .{encoding}.add
vim.opt.spelllang = "en"				-- spelling language
vim.opt.spelloptions = ""				-- options for spelling (camel = camelcase spell checking, noplainbuffer = require syntax)
vim.opt.spellsuggest = "best"				-- simple corrections: character transpose, sound-alike, etc.
vim.opt.splitbelow = true				-- vertical splits happen under current window
vim.opt.splitkeep = "cursor"				-- keep the same cursor position when splitting
vim.opt.splitright = true				-- horizontal splits happen to the right
vim.opt.startofline = false				-- commands like >> and << keep the cursor in the same column
vim.opt.statuscolumn = ""				-- control the sign column. see https://neovim.io/doc/user/options.html#'statuscolumn
vim.opt.statusline = ""					-- configure the status line. see https://neovim.io/doc/user/options.html#'statusline
vim.opt.suffixes = ".bak,~,.o,.h,.info,.swp,.obj"	-- files with these extensions get lower priority when matching wildcards
vim.opt.switchbuf = "uselast"				-- when using quickfix, open items in last used buffer
vim.opt.synmaxcol = 3000				-- don't syntax highlight past column 3000. breaks highlighting for the rest of the file, but faster
vim.opt.tabline = ""					-- use default for customizing value of tab line
vim.opt.tabpagemax = 50					-- maximum number of tab pages to be opened with -p
vim.opt.tabstop = 8					-- default indent amount for tabs
vim.opt.tagbsearch = true				-- use binary search for finding tags with :ta. Requires a sorted tag file
vim.opt.tagcase = "followic"				-- use the ignorecase setting for searching tag files
vim.opt.tagrelative = true				-- use filenames relative to the location of the tags file being used
vim.opt.tags = "./tags;,tags"				-- default tagfile name to use
vim.opt.tagstack = true					-- :tag and :pop push and pop from the tagstack queue
vim.opt.termbidi = false				-- don't let the termainl control if text is bidirectional
vim.opt.termguicolors = true				-- enable 24 bit color -- uses gui* instead of cterm* for syntax
vim.opt.termpastefilter = "BS,HT,ESC,DEL"		-- don't paste backspace, escape, delete, or tab when pasting
vim.opt.termsync = true					-- buffer all screen draw updates so it happens at once: reduces flicker
vim.opt.textwidth = 100					-- maximum text width before wrapping
vim.opt.thesaurus = ""					-- files to use for thesaurus completions
vim.opt.thesaurusfunc = ""				-- specific a function for the thesaurus completion
vim.opt.tildeop = false					-- don't make ~ behave like the not operator
vim.opt.timeout = true					-- enable a wait to wait for completion sequences after ^f
vim.opt.timeoutlen = 1000				-- use 1 second for timeouts
vim.opt.title = false					-- don't try to set the window title
vim.opt.titlelen = 80					-- if you did set the title, cap it at 80 chars
vim.opt.titleold = ""					-- what to set the window title to when existing the window
vim.opt.titlestring = ""				-- what to set the window title to
vim.opt.ttimeout = true					-- how to handle reciving partial escape sequences in the TUI.  Allow a short wait
vim.opt.ttimeoutlen = 50				-- 50ms is enough for partial escape sequences
vim.opt.undodir = vim.fn.stdpath("data") .. "/undo"     -- where to store undo files
vim.opt.undofile = true					-- enable storing undo files so you can undo between sessions
vim.opt.undolevels = 1000				-- have many undo levels
vim.opt.undoreload = 10000                              -- save the whole buffer for undo when reloading it
vim.opt.updatecount = 0					-- how many characters to wait before writing a swapfile. 0 = no swap
vim.opt.updatetime = 4000				-- how long to wait before writing a swap file on idle
vim.opt.verbose = 0					-- how much info should vim produce 0 = off, 1-16 for other amounts
vim.opt.verbosefile = ""				-- where to write the verbose info
vim.opt.viewdir = vim.fn.stdpath("data") .. "/view"     -- where to store files for :mkview
vim.opt.viewoptions = "folds,cursor,curdir"		-- configures :mkview, save/restores cursor position, folds, and directory
vim.opt.virtualedit = ""				-- allow the cursor to be positioned anywhere, even if no char is there
vim.opt.visualbell = false				-- no visual bell please
vim.opt.warn = true					-- give warning if shell command is used on a changed buffer
vim.opt.whichwrap = "b,s"				-- whcih characters move the cursor to the next/previous line (backspace and space). h/l not recommended
-- vim.opt.wildchar = "<Tab>"				-- character you type to start a wildcard expansion
vim.opt.wildcharm = 0					-- used to toggle whildchar in macros
vim.opt.wildignore = ""					-- file patterns to ignore when expanding wildchars
vim.opt.wildignorecase = true				-- ignore case when completing files and directories
vim.opt.wildmenu = true					-- enhanced command line completion
vim.opt.wildmode = "full"				-- complete the next full match when using wildmenu
vim.opt.wildoptions = "pum,tagfile"			-- use popup menu to show wildmenu completions, show the kind of tag when completing from tag menu
vim.opt.winbar = ""					-- configure the winbar
vim.opt.winblend = 0					-- disable transparency for flating windows
-- vim.opt.window = -1					-- how much to scroll with ^b and ^f
-- vim.opt.winheight = 1				--  window height (if possible)
-- vim.opt.winminheight = 1				-- minimum height of window
-- vim.opt.winminwidth = 1				-- minimum width of a window
-- vim.opt.winwidth = 20				-- width of hte current window
vim.opt.wrap = false					-- don't wrap
vim.opt.wrapmargin = 5					-- wrap 5 chars from the margin
vim.opt.wrapscan = true					-- searches wrap around to the top of the file
-- vim.opt.write = true					-- allow writing files
-- vim.opt.writebackup = false				-- we have git, don't need backups
-- vim.opt.writeany = true				-- allow write to any file without !
-- vim.opt.writedelay = 0				-- how long to wait to flush writes

-- This is stuff that doesn't have a nice config option. Maybe it goes somewhere else?
vim.fn.sign_define("DiagnosticSignError" , { text = "", texthl="DiagnosticSignError" })
vim.fn.sign_define("DiagnosticSignWarn" , { text = "", texthl="DiagnosticSignWarn" })
vim.fn.sign_define("DiagnosticSignInfo" , { text = "", texthl="DiagnosticSignInfo" })
vim.fn.sign_define("DiagnosticSignHint" , { text = "", texthl="DiagnosticSignHint" })
vim.diagnostic.config({
  virtual_text = { prefix = "●", }, -- set to false to disable virtual text
  severity_sort = true,
})

